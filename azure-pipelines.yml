# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
jobs:

  # Job to Build the Browsers
  - job: Cliqz_Android_CI_Build

    timeoutInMinutes: 60

    pool:
      vmImage: 'macOS 10.13'

    steps:

    - task: NodeTool@0
      displayName: 'Define Node to v9.11.2'
      inputs:
        versionSpec: '9.11.2'

    - bash: |
        npm i -g npm@6.5
        /usr/local/bin/npm ci
        npm run bundle
      displayName: 'Build ReactNative'

    - bash: ./gradlew $(gradle.flavor)
      env:
        DISABLE_GOOGLE_SERVICES: true
      displayName: 'Build Browser'

    - bash: |
        source scripts/azure-scripts/copy-builds.sh
        mv builds/ $(Build.ArtifactStagingDirectory)
      displayName: 'Archive Builds'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Builds'
      inputs:
        pathtoPublish: '$(Build.ArtifactStagingDirectory)/builds'
        artifactName: '$(Build.BuildId).Builds'
        publishLocation: 'Container'

  # Job to Test the Cliqz Browser
  - job: Cliqz_Android_CI_Test
    condition: and(eq(variables['run.tests'], 'true'), ne(variables['Build.Reason'], 'Schedule'))

    timeoutInMinutes: 60

    pool:
      vmImage: 'macOS 10.13'

    steps:

    - task: NodeTool@0
      displayName: 'Define Node to v9.11.2'
      inputs:
        versionSpec: '9.11.2'

    - bash: |
        npm i -g npm@6.5
        /usr/local/bin/npm ci
        npm run bundle
      displayName: 'Build ReactNative'

    - bash: |
        source scripts/azure-scripts/setup.sh
        source scripts/azure-scripts/launch-emu.sh
        ./gradlew assembleCliqzX86Debug
        source scripts/azure-scripts/start-video-logcat.sh
        ./gradlew connectedCliqzX86DebugAndroidTest
        source scripts/azure-scripts/videos-screenshots.sh
        source scripts/azure-scripts/clean-up.sh
      env:
        DISABLE_GOOGLE_SERVICES: true
      displayName: 'Run Tests'

    - bash: source scripts/azure-scripts/parse-reports.sh 'app/build/outputs/androidTest-results/connected/flavors/CLIQZX86/'
      displayName: 'Parse Results'

    - task: PublishTestResults@2
      condition: always()
      displayName: 'Publish JUnit Test'
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: 'app/build/outputs/androidTest-results/connected/flavors/CLIQZX86/*.xml'

    - task: ArchiveFiles@2
      condition: always()
      displayName: 'Archive Test Results'
      inputs:
        rootFolderOrFile: 'testresults'
        archiveType: 'zip'
        tarCompression: 'none'
        archiveFile: '$(Build.ArtifactStagingDirectory)/testsarchive.zip'

    - task: PublishBuildArtifacts@1
      condition: always()
      displayName: 'Publish Tests Archive'
      inputs:
        pathtoPublish: '$(Build.ArtifactStagingDirectory)'
        artifactName: '$(Build.BuildId).TestsArchive'
        publishLocation: 'Container'